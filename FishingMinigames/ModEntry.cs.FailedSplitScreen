using GenericModConfigMenu;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Graphics;
using StardewModdingAPI;
using StardewModdingAPI.Events;
using StardewModdingAPI.Utilities;
using StardewValley;
using StardewValley.BellsAndWhistles;
using StardewValley.Buildings;
using StardewValley.Objects;
using StardewValley.Tools;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Object = StardewValley.Object;

namespace FishingMinigames
{
    public class ModEntry : Mod, IAssetEditor
    {
        public static ModEntry context;
        ITranslationHelper translate;
        private static SoundEffect fishySound;

        private static readonly PerScreen<List<TemporaryAnimatedSprite>> animations = new PerScreen<List<TemporaryAnimatedSprite>>(createNewState: () => new List<TemporaryAnimatedSprite>());//per screen data
        private static readonly PerScreen<SparklingText> sparklingText = new PerScreen<SparklingText>();
        private static readonly PerScreen<bool> caughtDoubleFish = new PerScreen<bool>();
        private static readonly PerScreen<Farmer> whoStatic = new PerScreen<Farmer>();
        private static readonly PerScreen<int> whichFish = new PerScreen<int>();
        private static readonly PerScreen<int> minfishSize = new PerScreen<int>();
        private static readonly PerScreen<int> maxfishSize = new PerScreen<int>();
        private static readonly PerScreen<float> fishSize = new PerScreen<float>();
        private static readonly PerScreen<bool> recordSize = new PerScreen<bool>();
        private static readonly PerScreen<bool> perfect = new PerScreen<bool>();
        private static readonly PerScreen<int> fishQuality = new PerScreen<int>();
        private static readonly PerScreen<bool> fishCaught = new PerScreen<bool>();
        private static readonly PerScreen<bool> bossFish = new PerScreen<bool>();
        private static readonly PerScreen<int> difficulty = new PerScreen<int>();
        private static readonly PerScreen<bool> treasureCaught = new PerScreen<bool>();
        private static readonly PerScreen<bool> fromFishPond = new PerScreen<bool>();
        private static readonly PerScreen<int> clearWaterDistance = new PerScreen<int>();
        private static readonly PerScreen<Object> item = new PerScreen<Object>();


        private static readonly PerScreen<bool> hereFishying = new PerScreen<bool>();
        private static readonly PerScreen<bool> showPerfect = new PerScreen<bool>();
        private static readonly PerScreen<bool> itemIsInstantCatch = new PerScreen<bool>();
        private static readonly PerScreen<int> timer = new PerScreen<int>();
        private static readonly PerScreen<int> oldFacingDirection = new PerScreen<int>();
        private static readonly PerScreen<int> oldGameTimeInterval = new PerScreen<int>();
        private static readonly PerScreen<int> fishingFestivalMinigame = new PerScreen<int>();//0=none, 1=fall16, 2=winter8

        private static readonly PerScreen<int> startMinigameStage = new PerScreen<int>();
        private static readonly PerScreen<int> endMinigameStage = new PerScreen<int>();
        private static readonly PerScreen<int> endMinigameTimer = new PerScreen<int>();
        private static readonly PerScreen<bool> endMinigameAnimate = new PerScreen<bool>();


        //config values
        public static ModConfig config;
        private static KeybindList keyBinds;
        private static float minigameDamage;
        private static int startMinigameStyle;
        private static int endMinigameStyle;
        private static int festivalMode;
        private static int minigameDifficulty;//?
        private static float voiceVolume;
        private static float voicePitch;


        private static readonly PerScreen<int> stage = new PerScreen<int>();

        private static readonly PerScreen<Vector2> mouse = new PerScreen<Vector2>();
        private static readonly PerScreen<Vector2> mouse2 = new PerScreen<Vector2>();
        private static readonly PerScreen<Rectangle> area = new PerScreen<Rectangle>();


        public override void Entry(IModHelper helper)
        {
            context = this;
            if (!Context.IsSplitScreen) UpdateConfig();

            helper.Events.Display.RenderedWorld += Display_RenderedWorld;
            helper.Events.GameLoop.UpdateTicking += GameLoop_UpdateTicking;
            helper.Events.Input.ButtonsChanged += Input_ButtonsChanged;
            helper.Events.GameLoop.SaveLoaded += GameLoop_SaveLoaded;
            helper.Events.GameLoop.GameLaunched += GenericModConfigMenuIntegration;
        }

        private void GameLoop_SaveLoaded(object sender, SaveLoadedEventArgs e)
        {
            if (!Context.IsSplitScreen) UpdateConfig();
        }

        private void GenericModConfigMenuIntegration(object sender, GameLaunchedEventArgs e)     //Generic Mod Config Menu API
        {
            translate = context.Helper.Translation;
            var GenericMC = Helper.ModRegistry.GetApi<IGenericModConfigMenuApi>("spacechase0.GenericModConfigMenu");
            if (GenericMC != null)
            {
                GenericMC.RegisterModConfig(ModManifest, () => config = new ModConfig(), () => Helper.WriteConfig(config));
                GenericMC.SetDefaultIngameOptinValue(ModManifest, true);
                GenericMC.RegisterLabel(ModManifest, translate.Get("GenericMC.MainLabel"), ""); //All of these strings are stored in the traslation files.
                GenericMC.RegisterParagraph(ModManifest, translate.Get("GenericMC.MainDesc"));
                GenericMC.RegisterParagraph(ModManifest, translate.Get("GenericMC.MainDesc2"));
                GenericMC.RegisterParagraph(ModManifest, translate.Get("GenericMC.MainDescPC"));
                GenericMC.RegisterParagraph(ModManifest, translate.Get("GenericMC.MainDescPC2"));
                GenericMC.RegisterClampedOption(ModManifest, translate.Get("GenericMC.Volume"), translate.Get("GenericMC.VolumeDesc"),
                    () => config.VoiceVolume, (int val) => config.VoiceVolume = val, 0, 100);
                GenericMC.RegisterClampedOption(ModManifest, translate.Get("GenericMC.Pitch"), translate.Get("GenericMC.PitchDesc"),
                    () => config.VoicePitch, (int val) => config.VoicePitch = val, -100, 100);

                GenericMC.RegisterSimpleOption(ModManifest, translate.Get("GenericMC.KeyBinds"), translate.Get("GenericMC.KeyBindsDesc"),
                    () => config.KeyBinds, (string val) => config.KeyBinds = val);

                GenericMC.RegisterChoiceOption(ModManifest, translate.Get("GenericMC.StartMinigameStyle"), translate.Get("GenericMC.StartMinigameStyleDesc"),
                    () => (config.StartMinigameStyle == 0) ? translate.Get("GenericMC.Disabled") : (config.StartMinigameStyle == 1) ? translate.Get("GenericMC.StartMinigameStyle1") : (config.StartMinigameStyle == 2) ? translate.Get("GenericMC.StartMinigameStyle2") : translate.Get("GenericMC.StartMinigameStyle3"),
                    (string val) => config.StartMinigameStyle = Int32.Parse((val.Equals(translate.Get("GenericMC.Disabled"), StringComparison.Ordinal)) ? "0" : (val.Equals(translate.Get("GenericMC.StartMinigameStyle1"), StringComparison.Ordinal)) ? "1" : (val.Equals(translate.Get("GenericMC.StartMinigameStyle2"), StringComparison.Ordinal)) ? "2" : "3"),
                    new string[] { translate.Get("GenericMC.Disabled"), translate.Get("GenericMC.StartMinigameStyle1"), translate.Get("GenericMC.StartMinigameStyle2"), translate.Get("GenericMC.StartMinigameStyle3") });//small 'hack' so options appear as name strings, while config.json stores them as integers

                GenericMC.RegisterChoiceOption(ModManifest, translate.Get("GenericMC.EndMinigameStyle"), translate.Get("GenericMC.EndMinigameStyleDesc"),
                    () => (config.EndMinigameStyle == 0) ? translate.Get("GenericMC.Disabled") : (config.EndMinigameStyle == 1) ? translate.Get("GenericMC.EndMinigameStyle1") : (config.EndMinigameStyle == 2) ? translate.Get("GenericMC.EndMinigameStyle2") : translate.Get("GenericMC.EndMinigameStyle3"),
                    (string val) => config.EndMinigameStyle = Int32.Parse((val.Equals(translate.Get("GenericMC.Disabled"), StringComparison.Ordinal)) ? "0" : (val.Equals(translate.Get("GenericMC.EndMinigameStyle1"), StringComparison.Ordinal)) ? "1" : (val.Equals(translate.Get("GenericMC.EndMinigameStyle2"), StringComparison.Ordinal)) ? "2" : "3"),
                    new string[] { translate.Get("GenericMC.Disabled"), translate.Get("GenericMC.EndMinigameStyle1"), translate.Get("GenericMC.EndMinigameStyle2"), translate.Get("GenericMC.EndMinigameStyle3") });

                GenericMC.RegisterClampedOption(ModManifest, translate.Get("GenericMC.EndDamage"), translate.Get("GenericMC.EndDamageDesc"),
                    () => config.EndMinigameDamage, (float val) => config.EndMinigameDamage = val, 0f, 2f);
                GenericMC.RegisterClampedOption(ModManifest, translate.Get("GenericMC.Difficulty"), translate.Get("GenericMC.DifficultyDesc"),
                    () => config.MinigameDifficulty, (int val) => config.MinigameDifficulty = val, -5, 5);

                GenericMC.RegisterLabel(ModManifest, "", "");
                GenericMC.RegisterLabel(ModManifest, translate.Get("GenericMC.FestivalLabel"), "");
                GenericMC.RegisterParagraph(ModManifest, translate.Get("GenericMC.FestivalDesc"));
                GenericMC.RegisterChoiceOption(ModManifest, translate.Get("GenericMC.FestivalMode"), "",
                    () => (config.FestivalMode == 0) ? translate.Get("GenericMC.FestivalModeVanilla") : (config.FestivalMode == 1) ? translate.Get("GenericMC.FestivalModeSimple") : translate.Get("GenericMC.FestivalModePerfectOnly"),
                    (string val) => config.FestivalMode = Int32.Parse((val.Equals(translate.Get("GenericMC.FestivalModeVanilla"), StringComparison.Ordinal)) ? "0" : (val.Equals(translate.Get("GenericMC.FestivalModeSimple"), StringComparison.Ordinal)) ? "1" : "2"),
                    new string[] { translate.Get("GenericMC.FestivalModeVanilla"), translate.Get("GenericMC.FestivalModeSimple"), translate.Get("GenericMC.FestivalModePerfectOnly") });
            }
        }


        private async void Input_ButtonsChanged(object sender, ButtonsChangedEventArgs e)  //this.Monitor.Log(locationName, LogLevel.Debug);
        {
            if (e.Pressed.Contains(SButton.F5))
            {
                if (Context.IsWorldReady) Game1.freezeControls = false;
                UpdateConfig();
            }
            if (!Context.IsWorldReady) return;

            if (e.Pressed.Contains(SButton.Z))
            {
                if (fishSize.Value > 0)
                {
                    //b.DrawString(Game1.smallFont, Game1.content.LoadString("Strings\\StringsFromCSFiles:FishingRod.cs.14082"), 
                    //    Game1.GlobalToLocal(Game1.viewport, base.lastUser.Position + new Vector2(20f, -214f + yOffset)), Game1.textColor, 0f, Vector2.Zero, 1f, 
                    //    SpriteEffects.None, (float)base.lastUser.getStandingY() / 10000f + 0.002f + 0.06f);
                    //b.DrawString(Game1.smallFont, Game1.content.LoadString("Strings\\StringsFromCSFiles:FishingRod.cs.14083",
                    //    (LocalizedContentManager.CurrentLanguageCode != 0) ? Math.Round((double)this.fishSize * 2.54) : ((double)this.fishSize)), 
                    //    Game1.GlobalToLocal(Game1.viewport, base.lastUser.Position + new Vector2(85f - Game1.smallFont.MeasureString(Game1.content.LoadString("Strings\\StringsFromCSFiles:FishingRod.cs.14083", (LocalizedContentManager.CurrentLanguageCode != 0) ? Math.Round((double)this.fishSize * 2.54) : ((double)this.fishSize))).X / 2f, -179f + yOffset)),
                    //    this.recordSize ? (Color.Blue * Math.Min(1f, yOffset / 8f + 1.5f)) : Game1.textColor, 0f, Vector2.Zero, 1f, SpriteEffects.None, (float)base.lastUser.getStandingY() / 10000f + 0.002f + 0.06f);
                }
            }

            if (keyBinds.JustPressed())
            {
                Farmer who = Game1.player;
                whoStatic.Value = who;
                if (Game1.activeClickableMenu == null && whoStatic.Value.CurrentTool != null && whoStatic.Value.CurrentTool is FishingRod)
                {
                    if (fishingFestivalMinigame.Value > 0 && festivalMode == 0) return;
                    if (e.Pressed.Contains(Game1.options.useToolButton[0].ToSButton())) Helper.Input.Suppress(Game1.options.useToolButton[0].ToSButton());
                    if (e.Pressed.Contains(Game1.options.useToolButton[1].ToSButton())) Helper.Input.Suppress(Game1.options.useToolButton[1].ToSButton());
                    if (e.Pressed.Contains(SButton.ControllerX)) Helper.Input.Suppress(SButton.ControllerX);
                }


                if (endMinigameStage.Value == 2)
                {
                    Game1.freezeControls = true;
                    if (endMinigameStyle == 1)
                    {
                        if (endMinigameStage.Value == 2 && endMinigameTimer.Value < 20) endMinigameStage.Value = 10;
                        else endMinigameStage.Value = 9;

                        animations.Value.Clear();
                        stage.Value = 10;
                        PlayerCaughtFishEndFunction(whichFish.Value);
                    }
                }
                else
                {
                    if (Context.IsWorldReady && Context.CanPlayerMove && whoStatic.Value.CurrentTool is FishingRod)
                    {
                        if (Game1.isFestival() && (fishingFestivalMinigame.Value == 0 || festivalMode == 0)) return;
                        stage.Value = 1;
                        if (fishingFestivalMinigame.Value == 1)
                        {
                            FestivalGameSkip(whoStatic.Value, e);
                            return;
                        }

                        if (!hereFishying.Value)
                        {
                            try
                            {
                                perfect.Value = false;
                                mouse.Value = Game1.currentCursorTile;
                                oldFacingDirection.Value = whoStatic.Value.getGeneralDirectionTowards(new Vector2(mouse.Value.X * 64, mouse.Value.Y * 64));
                                whoStatic.Value.faceDirection(oldFacingDirection.Value);

                                if (whoStatic.Value.currentLocation.canFishHere() && whoStatic.Value.currentLocation.isTileFishable((int)mouse.Value.X, (int)mouse.Value.Y))
                                {
                                    context.Monitor.Log($"here fishy fishy {mouse.Value.X},{mouse.Value.Y}");
                                    HereFishyFishy(whoStatic.Value, (int)mouse.Value.X * 64, (int)mouse.Value.Y * 64);
                                }
                            }
                            catch
                            {
                                context.Monitor.Log($"error getting water tile", LogLevel.Error);
                            }
                        }
                    }
                }
            }
            stage.Value = 0;
        }

        private static readonly PerScreen<int> removeIndex = new PerScreen<int>();

        private async void GameLoop_UpdateTicking(object sender, UpdateTickingEventArgs e) //adds item.Value to inv
        {
            if (Game1.isFestival())
            {
                fishingFestivalMinigame.Value = 0;
                string data = context.Helper.Reflection.GetField<Dictionary<string, string>>(Game1.CurrentEvent, "festivalData").GetValue()["file"];
                if (data != null)
                {
                    whoStatic.Value = Game1.player;
                    //if (whoStatic.GetValueForScreen(Context.ScreenId) != Game1.player) return;
                    timer.Value = 0;
                    if (data.Equals("fall16") && Game1.currentMinigame is StardewValley.Minigames.FishingGame)
                    {
                        timer.Value = context.Helper.Reflection.GetField<int>(Game1.currentMinigame as StardewValley.Minigames.FishingGame, "gameEndTimer").GetValue();
                        if (timer.Value < 100000 && timer.Value >= 500) fishingFestivalMinigame.Value = 1;
                    }
                    else if (data.Equals("winter8"))
                    {
                        timer.Value = Game1.CurrentEvent.festivalTimer;
                        if (timer.Value < 120000 && timer.Value >= 500) fishingFestivalMinigame.Value = 2;
                    }
                    if (timer.Value <= 500 && fishingFestivalMinigame.Value > 0 && festivalMode > 0) _ = EmergencyCancel(whoStatic.Value);
                }
            }

            for (removeIndex.Value = animations.Value.Count - 1; removeIndex.Value >= 0; removeIndex.Value--)
            {
                if (endMinigameStage.Value != 2 && animations.Value[removeIndex.Value].update(Game1.currentGameTime))
                {
                    animations.Value.RemoveAt(removeIndex.Value);
                }
            }
            if (sparklingText.Value != null && sparklingText.Value.update(Game1.currentGameTime))
            {
                sparklingText.Value = null;
            }
            if (fishCaught.Value && stage.Value == 15)
            {
                whoStatic.Value.faceDirection(oldFacingDirection.Value);
                if (fishingFestivalMinigame.Value == 0) context.Helper.Multiplayer.SendMessage(whoStatic.Value.UniqueMultiplayerID, "FishCaught", modIDs: new[] { "barteke22.FishingInfoOverlays" });//update overlay
                fishCaught.Value = false;
            }
        }

        private static readonly PerScreen<int> drawIndex = new PerScreen<int>();
        private async void Display_RenderedWorld(object sender, RenderedWorldEventArgs e)
        {
            whoStatic.Value = Game1.player;
            //if (whoStatic.GetValueForScreen(Context.ScreenId) != Game1.player) return;
            if (!Game1.eventUp && !Game1.menuUp && !hereFishying.Value && whoStatic.Value.CurrentItem is FishingRod)
            {
                mouse2.Value = new Vector2((Game1.getMouseX()) / 64, (Game1.getMouseY()) / 64);
                Texture2D tile = Game1.content.Load<Texture2D>("LooseSprites\\buildingPlacementTiles");
                e.SpriteBatch.Draw(tile, mouse2.Value * 64, Game1.getSourceRectForStandardTileSheet(tile, (whoStatic.Value.currentLocation.isTileFishable((int)Game1.currentCursorTile.X, (int)Game1.currentCursorTile.Y)) ? 0 : 1), new Color(255, 255, 255, 0.5f), 0f, Vector2.Zero, 1f, SpriteEffects.None, 1f);
            }
            for (drawIndex.Value = animations.Value.Count - 1; drawIndex.Value >= 0; drawIndex.Value--)
            {
                animations.Value[drawIndex.Value].draw(e.SpriteBatch, false, 0, 0, 1f);
                if (endMinigameStage.Value > 0 && drawIndex.Value == 0)
                {
                    if (endMinigameStage.Value == 1)
                    {
                        area.Value = new Rectangle((int)whoStatic.Value.Position.X - 70, (int)whoStatic.Value.Position.Y - 185, 140, 205);
                        if (area.Value.Contains((int)animations.Value[0].Position.X, (int)animations.Value[0].Position.Y))
                        {
                            endMinigameStage.Value = 2;
                            endMinigameTimer.Value = 0;
                            whoStatic.Value.PlayFishBiteChime();
                            Game1.screenOverlayTempSprites.Add(new TemporaryAnimatedSprite("LooseSprites\\Cursors", new Rectangle(395, 497, 3, 8), new Vector2(whoStatic.Value.getStandingX() - Game1.viewport.X, whoStatic.Value.getStandingY() - 128 - 8 - Game1.viewport.Y), flipped: false, 0.02f, Color.White)
                            {
                                scale = 5f,
                                scaleChange = -0.01f,
                                motion = new Vector2(0f, -0.5f),
                                shakeIntensityChange = -0.005f,
                                shakeIntensity = 1f
                            });
                        }
                    }
                    else if (endMinigameStage.Value == 2)// COULD ADD A FAILED BOOL, AND MAYBE LOCK CONTROLS FOR A FEW SEC, THEN SKIP STAGE TO FAIL?
                    {
                        endMinigameTimer.Value++;

                        if (endMinigameTimer.Value > 100 - (difficulty.Value / 2))
                        {
                            endMinigameStage.Value = 8;
                            whoStatic.Value.completelyStopAnimatingOrDoingAction();
                            List<FarmerSprite.AnimationFrame> animationFrames = new List<FarmerSprite.AnimationFrame>(){
                                new FarmerSprite.AnimationFrame(94, 500, false, false, null, false).AddFrameAction(delegate (Farmer f) { f.jitterStrength = 2f; }) };
                            whoStatic.Value.FarmerSprite.setCurrentAnimation(animationFrames.ToArray());
                            whoStatic.Value.FarmerSprite.PauseForSingleAnimation = true;
                            whoStatic.Value.FarmerSprite.loop = true;
                            whoStatic.Value.FarmerSprite.loopThisAnimation = true;
                            whoStatic.Value.Sprite.currentFrame = 94;
                        }
                    }
                }
            }

            if (endMinigameAnimate.Value) Game1.drawTool(whoStatic.Value);

            if (showPerfect.Value)
            {
                perfect.Value = true;
                sparklingText.Value = new SparklingText(Game1.dialogueFont, Game1.content.LoadString("Strings\\UI:BobberBar_Perfect"), Color.Yellow, Color.White, false, 0.1, 1500, -1, 500, 1f);
                Game1.playSound("jingle1");
                showPerfect.Value = false;
            }

            if (sparklingText.Value != null && whoStatic.Value != null && !itemIsInstantCatch.Value)
            {
                sparklingText.Value.draw(e.SpriteBatch, Game1.GlobalToLocal(Game1.viewport, whoStatic.Value.Position + new Vector2(-64f, -400f)));
            }
        }


        private async static void HereFishyFishy(Farmer who, int x, int y)
        {
            context.Monitor.Log("test55", LogLevel.Debug);
            //if (whoStatic.GetValueForScreen(Context.ScreenId) != Game1.player) return;
            if (stage.Value != 1) return;
            stage.Value = 2;
            if (whoStatic.Value.IsLocalPlayer && fishingFestivalMinigame.Value != 2)
            {
                float oldStamina = whoStatic.Value.Stamina;
                whoStatic.Value.Stamina -= 8f - (float)whoStatic.Value.FishingLevel * 0.1f;
                whoStatic.Value.checkForExhaustion(oldStamina);
            }

            oldGameTimeInterval.Value = Game1.gameTimeInterval;
            if (!Game1.IsMultiplayer && !Game1.isFestival()) Game1.gameTimeInterval = 0;
            startMinigameStage.Value = 0;
            endMinigameStage.Value = 0;

            CatchFish(whoStatic.Value, x, y);
            if (stage.Value != 4) return;
            stage.Value = 5;


            if (!fromFishPond.Value && fishingFestivalMinigame.Value != 2 && startMinigameStyle > 0)
            {
                //startMinigameStage.Value = 1;
                //await MINIGAME                    TODO
            }

            if (startMinigameStage.Value == 5)
            {
                AnnounceAndEmote(whoStatic.Value);
                return;
            }
            else await HereFishyStartingAnimation(whoStatic.Value);
            //if (whoStatic.GetValueForScreen(Context.ScreenId) != Game1.player) return;
            if (stage.Value != 7) return;
            stage.Value = 8;


            if (!fromFishPond.Value && endMinigameStyle > 0) endMinigameStage.Value = 1;

            await HereFishyFlyingAnimation(whoStatic.Value, x, y);
        }


        private static readonly PerScreen<FishingRod> rod = new PerScreen<FishingRod>();
        private static readonly PerScreen<Vector2> bobberTile = new PerScreen<Vector2>();
        private static readonly PerScreen<double> baitPotency = new PerScreen<double>();
        private static readonly PerScreen<Rectangle> fishSplashRect = new PerScreen<Rectangle>();
        private static readonly PerScreen<Rectangle> bobberRect = new PerScreen<Rectangle>();
        private static readonly PerScreen<bool> splashPoint = new PerScreen<bool>();
        private static readonly PerScreen<string[]> fishData = new PerScreen<string[]>();
        private async static void CatchFish(Farmer who, int x, int y)
        {
            context.Monitor.Log("test44", LogLevel.Debug);
            //if (whoStatic.GetValueForScreen(Context.ScreenId) != Game1.player) return;
            if (stage.Value != 2) return;
            stage.Value = 3;
            rod.Value = whoStatic.Value.CurrentTool as FishingRod;
            bobberTile.Value = new Vector2(mouse.Value.X, mouse.Value.Y);
            fromFishPond.Value = whoStatic.Value.currentLocation.isTileBuildingFishable((int)bobberTile.Value.X, (int)bobberTile.Value.Y);

            clearWaterDistance.Value = FishingRod.distanceToLand((int)bobberTile.Value.X, (int)bobberTile.Value.Y, whoStatic.Value.currentLocation);
            baitPotency.Value = ((rod.Value.attachments[0] != null) ? ((float)rod.Value.attachments[0].Price / 10f) : 0f);
            fishSplashRect.Value = new Rectangle(whoStatic.Value.currentLocation.fishSplashPoint.X * 64, whoStatic.Value.currentLocation.fishSplashPoint.Y * 64, 64, 64);
            bobberRect.Value = new Rectangle((int)(mouse.Value.X * 64) - 80, (int)(mouse.Value.Y * 64) - 80, 64, 64);
            splashPoint.Value = fishSplashRect.Value.Intersects(bobberRect.Value);

            item.Value = whoStatic.Value.currentLocation.getFish(0, (rod.Value.attachments[0] != null) ? rod.Value.attachments[0].ParentSheetIndex : (-1), clearWaterDistance.Value + (splashPoint.Value ? 1 : 0), whoStatic.Value, baitPotency.Value + (splashPoint.Value ? 0.4 : 0.0), bobberTile.Value); //all item.Value data starts here, FishingRod.cs

            if (fromFishPond.Value) //get whole fishpond stage in one go: 6-3-1 fish
            {
                foreach (Building b in Game1.getFarm().buildings)
                {
                    if (b is FishPond && b.isTileFishable(bobberTile.Value))
                    {
                        for (int i = 0; i < (b as FishPond).currentOccupants.Value; i++)
                        {
                            (b as FishPond).CatchFish();
                            item.Value.Stack++;
                        }
                        break;
                    }
                }
            }

            if (item.Value != null) whichFish.Value = item.Value.ParentSheetIndex;//fix here for fishpond

            if (item.Value == null || whichFish.Value <= 0)
            {
                item.Value = new Object(Game1.random.Next(167, 173), 1);//trash
                whichFish.Value = item.Value.ParentSheetIndex;
            }

            fishSize.Value = 1f;
            fishQuality.Value = 0;
            difficulty.Value = 0;
            minfishSize.Value = 0;
            maxfishSize.Value = 0;

            Dictionary<int, string> data = Game1.content.Load<Dictionary<int, string>>("Data\\Fish");
            fishData.Value = null;
            if (data.ContainsKey(whichFish.Value)) fishData.Value = data[whichFish.Value].Split('/');


            itemIsInstantCatch.Value = false;
            if (item.Value is Furniture) itemIsInstantCatch.Value = true;
            else if (Utility.IsNormalObjectAtParentSheetIndex(item.Value, whichFish.Value) && data.ContainsKey(whichFish.Value))
            {
                int[] temp = new int[3];
                if (!int.TryParse(fishData.Value[1], out temp[0]) || !int.TryParse(fishData.Value[3], out temp[1]) || !int.TryParse(fishData.Value[4], out temp[2])) itemIsInstantCatch.Value = true;
                else
                {
                    difficulty.Value = temp[0];
                    minfishSize.Value = temp[1];
                    maxfishSize.Value = temp[2];
                }
            }
            else itemIsInstantCatch.Value = true;

            if (itemIsInstantCatch.Value || item.Value.Category == -20 || item.Value.ParentSheetIndex == 152 || item.Value.ParentSheetIndex == 153 || item.Value.parentSheetIndex == 157 || item.Value.parentSheetIndex == 797 || item.Value.parentSheetIndex == 79 || item.Value.parentSheetIndex == 73 || item.Value.ParentSheetIndex == 842 || (item.Value.ParentSheetIndex >= 820 && item.Value.ParentSheetIndex <= 828) || item.Value.parentSheetIndex == GameLocation.CAROLINES_NECKLACE_ITEM || item.Value.ParentSheetIndex == 890 || fromFishPond.Value)
            {
                itemIsInstantCatch.Value = true;
            }

            //special item.Value handling
            if (whichFish.Value == GameLocation.CAROLINES_NECKLACE_ITEM) item.Value.questItem.Value = true;
            if (whichFish.Value == 79 || whichFish.Value == 842)
            {
                item.Value = whoStatic.Value.currentLocation.tryToCreateUnseenSecretNote(whoStatic.Value);
            }
            if (fishingFestivalMinigame.Value != 2 && !(item.Value is Furniture) && !fromFishPond.Value && whoStatic.Value.team.specialOrders != null)
            {
                foreach (SpecialOrder order in whoStatic.Value.team.specialOrders)
                {
                    order.onFishCaught?.Invoke(whoStatic.Value, item.Value);
                }
            }


            //sizes
            fishSize.Value *= Math.Min((float)clearWaterDistance.Value / 5f, 1f);
            int minimumSizeContribution = 1 + whoStatic.Value.FishingLevel / 2;
            fishSize.Value *= (float)Game1.random.Next(minimumSizeContribution, Math.Max(6, minimumSizeContribution)) / 5f;

            if (rod.Value.getBaitAttachmentIndex() != -1) fishSize.Value *= 1.2f;
            fishSize.Value *= 1f + (float)Game1.random.Next(-10, 11) / 100f;
            fishSize.Value = Math.Max(0f, Math.Min(1f, fishSize.Value));


            fishSize.Value = (int)((float)minfishSize.Value + (float)(maxfishSize.Value - minfishSize.Value) * fishSize.Value);
            fishSize.Value++;

            if (rod.Value.Name.Equals("Training Rod", StringComparison.Ordinal)) fishSize.Value = minfishSize.Value;


            bossFish.Value = FishingRod.isFishBossFish(whichFish.Value);
            stage.Value = 4;
        }

        private async static Task CatchFishAfterMinigame(Farmer who)
        {
            //if (whoStatic.GetValueForScreen(Context.ScreenId) != Game1.player) return;
            if (stage.Value != 11) return;
            stage.Value = 12;
            if (!fromFishPond.Value && endMinigameStyle > 0 && endMinigameStage.Value > 8)
            {
                if (endMinigameStage.Value == 10) showPerfect.Value = true;
                whoStatic.Value.completelyStopAnimatingOrDoingAction();
                endMinigameAnimate.Value = true;
                (whoStatic.Value.CurrentTool as FishingRod).setTimingCastAnimation(whoStatic.Value);
                switch (oldFacingDirection.Value)
                {
                    case 0:
                        whoStatic.Value.FarmerSprite.animateOnce(295, 1f, 1);
                        whoStatic.Value.CurrentTool.Update(0, 0, whoStatic.Value);
                        break;
                    case 1:
                        whoStatic.Value.FarmerSprite.animateOnce(296, 1f, 1);
                        whoStatic.Value.CurrentTool.Update(1, 0, whoStatic.Value);
                        break;
                    case 2:
                        whoStatic.Value.FarmerSprite.animateOnce(297, 1f, 1);
                        whoStatic.Value.CurrentTool.Update(2, 0, whoStatic.Value);
                        break;
                    case 3:
                        whoStatic.Value.FarmerSprite.animateOnce(298, 1f, 1);
                        whoStatic.Value.CurrentTool.Update(3, 0, whoStatic.Value);
                        break;
                }
                await Task.Delay(300);
                endMinigameAnimate.Value = false;
            }

            context.Monitor.Log("test22", LogLevel.Debug);

            //data calculations: quality, double, exp, treasure

            treasureCaught.Value = false;
            float reduction = 0f;

            if (!itemIsInstantCatch.Value)
            {
                if (rod.Value.Name.Equals("Training Rod", StringComparison.Ordinal))
                {
                    fishQuality.Value = 0;
                    fishSize.Value = minfishSize.Value;
                }
                else
                {
                    fishQuality.Value = (fishSize.Value * (0.9 + (whoStatic.Value.FishingLevel / 5.0)) < 0.33) ? 0 : ((fishSize.Value * (0.9 + (whoStatic.Value.FishingLevel / 5.0)) < 0.66) ? 1 : 2);//init quality
                    if (rod.Value.getBobberAttachmentIndex() == 877) fishQuality.Value++;

                    if (startMinigameStyle > 0 && endMinigameStyle > 0) //minigame score reductions
                    {
                        if (startMinigameStage.Value == 10) reduction -= 0.4f;
                        else if (startMinigameStage.Value == 9) reduction += 0.3f;
                        else if (startMinigameStage.Value == 8) reduction += 0.5f;
                        else if (startMinigameStage.Value == 7) reduction += 0.7f;
                        else if (startMinigameStage.Value == 6) reduction += 0.8f;
                        if (endMinigameStage.Value == 10) reduction -= 0.4f;
                        else if (endMinigameStage.Value == 9) reduction += 0.6f;
                        else if (endMinigameStage.Value == 8) reduction += 0.8f;
                    }
                    else if (startMinigameStyle > 0)
                    {
                        if (startMinigameStage.Value == 10) reduction -= 1f;
                        else if (startMinigameStage.Value == 9) reduction += 0f;
                        else if (startMinigameStage.Value < 9) reduction += 1f;
                        else if (startMinigameStage.Value == 6) reduction += 2f;
                    }
                    else if (endMinigameStyle > 0)
                    {
                        if (endMinigameStage.Value == 10) reduction -= 1f;
                        else if (endMinigameStage.Value == 9) reduction += (Game1.random.Next(0, 2) == 0) ? 0f : 1f;
                        else if (endMinigameStage.Value < 8) reduction += 2f;
                    }
                    else
                    {
                        if (perfect.Value) fishQuality.Value++;
                    }
                    fishSize.Value -= (int)Math.Round(reduction * 2);
                    fishQuality.Value -= (int)Math.Round(reduction);

                }

                if (fishQuality.Value < 0) fishQuality.Value = 0;
                if (fishQuality.Value > 2) fishQuality.Value = 4;


                caughtDoubleFish.Value = fishingFestivalMinigame.Value != 2 && !bossFish.Value && rod.Value.getBaitAttachmentIndex() == 774 && !fromFishPond.Value && Game1.random.NextDouble() < 0.1 + whoStatic.Value.DailyLuck / 2.0 - reduction - 0.5f;


                if (whoStatic.Value.IsLocalPlayer && fishingFestivalMinigame.Value != 2)
                {
                    int experience = Math.Max(1, (fishQuality.Value + 1) * 3 + difficulty.Value / 3);
                    if (bossFish.Value) experience *= 5;

                    if (startMinigameStyle + endMinigameStyle > 0) experience += (int)(experience - reduction - 0.5f);
                    else if (perfect.Value) experience += (int)((float)experience * 1.4f);

                    whoStatic.Value.gainExperience(1, experience);
                    if (minigameDamage > 0 && endMinigameStyle > 0 && endMinigameStage.Value == 8) whoStatic.Value.takeDamage((int)((10 + (difficulty.Value / 10) + (int)(fishSize.Value / 5) - whoStatic.Value.FishingLevel) * minigameDamage), true, null);
                }


                treasureCaught.Value = fishingFestivalMinigame.Value != 2 && whoStatic.Value.fishCaught != null && whoStatic.Value.fishCaught.Count() > 1 && Game1.random.NextDouble() < FishingRod.baseChanceForTreasure + (double)whoStatic.Value.LuckLevel * 0.005 + ((rod.Value.getBaitAttachmentIndex() == 703) ? FishingRod.baseChanceForTreasure : 0.0) + ((rod.Value.getBobberAttachmentIndex() == 693) ? (FishingRod.baseChanceForTreasure / 3.0) : 0.0) + whoStatic.Value.DailyLuck / 2.0 + ((whoStatic.Value.professions.Contains(9) ? FishingRod.baseChanceForTreasure : 0.0) - reduction - 0.5f);
                item.Value.Quality = fishQuality.Value;
                if (caughtDoubleFish.Value) item.Value.Stack = 2;
            }
            else if (whoStatic.Value.IsLocalPlayer && fishingFestivalMinigame.Value != 2)
            {
                whoStatic.Value.gainExperience(1, 3);
                if (!fromFishPond.Value && minigameDamage > 0 && endMinigameStyle > 0 && endMinigameStage.Value == 8) whoStatic.Value.takeDamage((int)((16 - whoStatic.Value.FishingLevel) * minigameDamage), true, null);
            }
            stage.Value = 13;
        }

        //player jumping and calling fish
        private async static Task HereFishyStartingAnimation(Farmer who)
        {
            context.Monitor.Log("test66", LogLevel.Debug);
            //if (whoStatic.ValueStatic.GetValueForScreen(Context.ScreenId) != Game1.player) return;
            if (stage.Value != 5) return;
            stage.Value = 6;
            Game1.freezeControls = true;
            hereFishying.Value = true;
            if (fishySound != null) fishySound.Play(voiceVolume, voicePitch, 0);

            whoStatic.Value.completelyStopAnimatingOrDoingAction();
            whoStatic.Value.jitterStrength = 2f;
            List<FarmerSprite.AnimationFrame> animationFrames = new List<FarmerSprite.AnimationFrame>(){
                new FarmerSprite.AnimationFrame(94, 100, false, false, null, false).AddFrameAction(delegate (Farmer f) { f.jitterStrength = 2f; }) };

            whoStatic.Value.FarmerSprite.setCurrentAnimation(animationFrames.ToArray());
            whoStatic.Value.FarmerSprite.PauseForSingleAnimation = true;
            whoStatic.Value.FarmerSprite.loop = true;
            whoStatic.Value.FarmerSprite.loopThisAnimation = true;
            whoStatic.Value.Sprite.currentFrame = 94;


            await Task.Delay(1793);

            if (startMinigameStyle + endMinigameStyle == 0 && Game1.random.Next(whoStatic.Value.FishingLevel, 20) > 16)
            {
                showPerfect.Value = true;
            }

            whoStatic.Value.synchronizedJump(8f);

            await Task.Delay(1000);

            whoStatic.Value.stopJittering();
            whoStatic.Value.completelyStopAnimatingOrDoingAction();
            whoStatic.Value.forceCanMove();
            Game1.freezeControls = true;

            await Task.Delay(Game1.random.Next(500, 1000));

            animations.Value.Clear();
            stage.Value = 7;
        }

        //fish flying from xy to player
        private async static Task HereFishyFlyingAnimation(Farmer who, int x, int y)
        {
            context.Monitor.Log("test77", LogLevel.Debug);
            //if (whoStatic.GetValueForScreen(Context.ScreenId) != Game1.player) return;
            if (stage.Value != 8) return;
            stage.Value = 9;
            if (itemIsInstantCatch.Value && !fromFishPond.Value) //angory fish emote workaround
            {
                int interval = 200;
                Vector2 position = new Vector2(mouse.Value.X * 64, mouse.Value.Y * 64 - 32);
                animations.Value.Add(new TemporaryAnimatedSprite(Game1.emoteSpriteSheet.ToString(), new Rectangle(12 * 16 % Game1.emoteSpriteSheet.Width, 12 * 16 / Game1.emoteSpriteSheet.Width * 16, 16, 16), interval, 1, 0, position, false, false, 1f, 0f, Color.White, 4f, 0f, 0f, 0f, false));
                await Task.Delay(interval);
                animations.Value.Add(new TemporaryAnimatedSprite(Game1.emoteSpriteSheet.ToString(), new Rectangle(13 * 16 % Game1.emoteSpriteSheet.Width, 12 * 16 / Game1.emoteSpriteSheet.Width * 16, 16, 16), interval, 1, 0, position, false, false, 1f, 0f, Color.White, 4f, 0f, 0f, 0f, false));
                await Task.Delay(interval);
                animations.Value.Add(new TemporaryAnimatedSprite(Game1.emoteSpriteSheet.ToString(), new Rectangle(14 * 16 % Game1.emoteSpriteSheet.Width, 12 * 16 / Game1.emoteSpriteSheet.Width * 16, 16, 16), interval, 1, 0, position, false, false, 1f, 0f, Color.White, 4f, 0f, 0f, 0f, false));
                await Task.Delay(interval);
                animations.Value.Add(new TemporaryAnimatedSprite(Game1.emoteSpriteSheet.ToString(), new Rectangle(15 * 16 % Game1.emoteSpriteSheet.Width, 12 * 16 / Game1.emoteSpriteSheet.Width * 16, 16, 16), interval, 1, 0, position, false, false, 1f, 0f, Color.White, 4f, 0f, 0f, 0f, false));
                await Task.Delay(interval);
            }
            float t;
            float distance2 = mouse.Value.Y * 64 - (float)(whoStatic.Value.getStandingY() - 100);
            float height2 = Math.Abs(distance2 + 256f + 32f);
            if (whoStatic.Value.FacingDirection == 0)
            {
                height2 += 96f;
            }
            float gravity2 = 0.002f;
            float velocity = (float)Math.Sqrt((double)(2f * gravity2 * height2));
            t = (float)(Math.Sqrt((double)(2f * (height2 - distance2) / gravity2)) + (double)(velocity / gravity2));
            float xVelocity2 = 0f;
            if (t != 0f)
            {
                xVelocity2 = (whoStatic.Value.Position.X - (mouse.Value.X * 64)) / t;
            }
            stage.Value = 10;
            animations.Value.Add(new TemporaryAnimatedSprite((item.Value is Furniture) ? Furniture.furnitureTexture.ToString() : "Maps\\springobjects", (item.Value is Furniture) ? (item.Value as Furniture).defaultSourceRect : Game1.getSourceRectForStandardTileSheet(Game1.objectSpriteSheet, whichFish.Value, 16, 16), t, 1, 0, new Vector2(mouse.Value.X * 64, mouse.Value.Y * 64), false, false, mouse.Value.Y * 64 / 10000f, 0f, Color.White, (item.Value is Furniture) ? 2f : 4f, 0f, 0f, 0f, false)
            {
                motion = new Vector2(xVelocity2, -velocity),
                acceleration = new Vector2(0f, gravity2),
                timeBasedMotion = true,
                endFunction = new TemporaryAnimatedSprite.endBehavior(PlayerCaughtFishEndFunction),
                extraInfoForEndBehavior = whichFish.Value,
                endSound = "tinyWhip"
            });
            for (int i = 1; i < item.Value.Stack; i++)
            {
                await Task.Delay(100);
                animations.Value.Add(new TemporaryAnimatedSprite("Maps\\springobjects", Game1.getSourceRectForStandardTileSheet(Game1.objectSpriteSheet, whichFish.Value, 16, 16), t, 1, 0, new Vector2(mouse.Value.X * 64, mouse.Value.Y * 64), false, false, mouse.Value.Y * 64 / 10000f, 0f, Color.White, 4f, 0f, 0f, 0f, false)
                {
                    motion = new Vector2(xVelocity2, -velocity),
                    acceleration = new Vector2(0f, gravity2),
                    timeBasedMotion = true,
                    endSound = "tinyWhip",
                    Parent = whoStatic.Value.currentLocation
                });

            }
            Game1.freezeControls = true;
        }

        public async static void PlayerCaughtFishEndFunction(int extraData)
        {
            //if (whoStatic.GetValueForScreen(Context.ScreenId) != Game1.player) return;
            if (stage.Value != 10) return;
            stage.Value = 11;

            await CatchFishAfterMinigame(whoStatic.Value);
            //if (whoStatic.GetValueForScreen(Context.ScreenId) != Game1.player) return;


            if (stage.Value != 13) return;
            stage.Value = 14;

            context.Monitor.Log("test000", LogLevel.Debug);
            if (!fromFishPond.Value)
            {
                if (endMinigameStage.Value > 8) await Task.Delay(300);
                else if (endMinigameStage.Value == 8)
                {
                    animations.Value.Add(new TemporaryAnimatedSprite(10, whoStatic.Value.Position - new Vector2(0, 100), Color.Blue));
                    await Task.Delay(100);
                }


                recordSize.Value = whoStatic.Value.caughtFish(whichFish.Value, (int)fishSize.Value, false, caughtDoubleFish.Value ? 2 : 1);
                if (FishingRod.isFishBossFish(whichFish.Value))
                {
                    Game1.showGlobalMessage(Game1.content.LoadString("Strings\\StringsFromCSFiles:FishingRod.cs.14068"));
                    string name = Game1.objectInformation[whichFish.Value].Split('/')[4];

                    //context.Helper.Reflection.GetField<Multiplayer>(Game1.game1, "multiplayer").GetValue().globalChatInfoMessage("CaughtLegendaryFish", new string[] { whoStatic.Value.Name, name }); //multiplayer class is not protected
                    if (Game1.IsMultiplayer || Game1.multiplayerMode != 0)
                    {
                        if (Game1.IsClient) Game1.client.sendMessage(15, "CaughtLegendaryFish", new string[] { whoStatic.Value.Name, name });
                        else if (Game1.IsServer)
                        {
                            foreach (long id in Game1.otherFarmers.Keys)
                            {
                                Game1.server.sendMessage(id, 15, whoStatic.Value, "CaughtLegendaryFish", new string[] { whoStatic.Value.Name, name });
                            }
                        }
                    }
                }
                else if (recordSize.Value)
                {
                    sparklingText.Value = new SparklingText(Game1.dialogueFont, Game1.content.LoadString("Strings\\StringsFromCSFiles:FishingRod.cs.14069"), Color.LimeGreen, Color.Azure, false, 0.1, 2500, -1, 500, 1f);
                    whoStatic.Value.currentLocation.localSound("newRecord");
                }

                AnnounceAndEmote(whoStatic.Value);
            }

            context.Monitor.Log($"caught fish end");
            whoStatic.Value.Halt();
            whoStatic.Value.armOffset = Vector2.Zero;


            if (fishingFestivalMinigame.Value == 2)
            {
                if (!itemIsInstantCatch.Value)
                {
                    if (festivalMode == 1 || endMinigameStage.Value == 10) Game1.CurrentEvent.caughtFish(whichFish.Value, 10, whoStatic.Value);
                }
            }
            else//adding item.Values + chest
            {
                context.Helper.Reflection.GetField<Farmer>(rod.Value, "lastUser").SetValue(whoStatic.Value);
                context.Helper.Reflection.GetField<int>(rod.Value, "whichFish").SetValue(whichFish.Value);
                context.Helper.Reflection.GetField<bool>(rod.Value, "caughtDoubleFish").SetValue(caughtDoubleFish.Value);
                context.Helper.Reflection.GetField<int>(rod.Value, "fishQuality").SetValue(fishQuality.Value);
                context.Helper.Reflection.GetField<int>(rod.Value, "clearWaterDistance").SetValue(clearWaterDistance.Value);
                context.Helper.Reflection.GetField<Farmer>(whoStatic.Value.CurrentTool, "lastUser").SetValue(whoStatic.Value);

                if (!treasureCaught.Value || itemIsInstantCatch.Value)
                {
                    if (!fromFishPond.Value) rod.Value.doneFishing(whoStatic.Value, true);
                    whoStatic.Value.addItemByMenuIfNecessary(item.Value);
                }
                else
                {
                    await Task.Delay(1000);
                    whoStatic.Value.currentLocation.localSound("openChest");
                    animations.Value.Add(new TemporaryAnimatedSprite("LooseSprites\\Cursors", new Rectangle(64, 1920, 32, 32), 200f, 4, 0, whoStatic.Value.Position + new Vector2(-32f, -228f), flicker: false, flipped: false, (float)whoStatic.Value.getStandingY() / 10000f + 0.001f, 0f, Color.White, 4f, 0f, 0f, 0f)
                    {
                        motion = new Vector2(0f, -0.128f),
                        timeBasedMotion = true,
                        alpha = 0f,
                        alphaFade = -0.002f,
                        endFunction = rod.Value.openTreasureMenuEndFunction,
                        extraInfoForEndBehavior = (!whoStatic.Value.addItemToInventoryBool(item.Value)) ? 1 : 0
                    });
                    await Task.Delay(1000);
                }
            }

            Game1.freezeControls = false;

            if (!Game1.IsMultiplayer && !Game1.isFestival()) Game1.gameTimeInterval = oldGameTimeInterval.Value;
            stage.Value = 15;
            hereFishying.Value = false;
            fishCaught.Value = true;
        }


        private async static void AnnounceAndEmote(Farmer who) //send messages to other mods to do stuff: sounds/animations.Value
        {
            context.Monitor.Log("test88", LogLevel.Debug);
            //if (whoStatic.GetValueForScreen(Context.ScreenId) != Game1.player) return;
            if (startMinigameStyle + endMinigameStyle > 0)
            {
                if (startMinigameStage.Value == 4) //for now 4 = cancel = X
                {
                    whoStatic.Value.doEmote(36);
                    whoStatic.Value.netDoEmote("x");
                }
                else if (startMinigameStage.Value == 5) //for now 5 = fail = Angry
                {
                    whoStatic.Value.doEmote(12);
                    whoStatic.Value.netDoEmote("angry");
                }
                else if (endMinigameStage.Value == 8) //8 = hit = Uh
                {
                    whoStatic.Value.doEmote(10);
                    whoStatic.Value.netDoEmote("angry");
                }
                else //otherwise = happy
                {
                    whoStatic.Value.doEmote(32);
                    whoStatic.Value.netDoEmote("happy");
                }
            }
        }


        private async static void FestivalGameSkip(Farmer who, ButtonsChangedEventArgs e)
        {
            //if (whoStatic.GetValueForScreen(Context.ScreenId) != Game1.player) return;
            int direction = whoStatic.Value.FacingDirection;
            //await FestivalCancelRod(who);

            if (!hereFishying.Value)
            {
                hereFishying.Value = true;
                if (fishySound != null) fishySound.Play(voiceVolume, voicePitch, 0);
                whoStatic.Value.synchronizedJump(8f);
                await Task.Delay(Game1.random.Next(2000, 3000));

                Event ev = Game1.CurrentEvent;
                //if (context.Helper.Reflection.GetField<Dictionary<string, string>>(ev, "festivalData").GetValue()["file"].Equals("fall16"))
                //{
                ev.caughtFish(137, Game1.random.Next(0, 20), whoStatic.Value);
                if (Game1.random.Next(0, 5) == 0) ev.perfectFishing();
                //}
                //else ev.caughtFish(147, Game1.random.Next(0, 20), who);

                await Task.Delay(Game1.random.Next(2500, 4500));
                hereFishying.Value = false;

                //if (fishingFestivalMinigame.Value == 1 && keyBinds.JustPressed()) FestivalGameSkip(who);
            }
            whoStatic.Value.FacingDirection = direction;
            Game1.freezeControls = false;
            return;
        }

        private async static Task EmergencyCancel(Farmer who)
        {
            //if (whoStatic.GetValueForScreen(Context.ScreenId) != Game1.player) return;
            endMinigameStage.Value = 5;
            startMinigameStage.Value = 0;
            animations.Value.Clear();
            await Task.Delay(1000);
            whoStatic.Value.UsingTool = false;
            whoStatic.Value.Halt();
            whoStatic.Value.completelyStopAnimatingOrDoingAction();
            hereFishying.Value = false;
            Game1.freezeControls = false;
        }



        /// <summary>Get whether this instance can edit the given asset.</summary>
        public bool CanEdit<T>(IAssetInfo asset)
        {
            if (asset.AssetNameEquals("TileSheets/tools") || asset.AssetNameEquals("Strings/StringsFromCSFiles")) return true;
            return false;
        }
        /// <summary>Edits the asset if CanEdit</summary>
        public void Edit<T>(IAssetData asset)
        {
            if (asset.AssetNameEquals("TileSheets/tools"))
            {
                var editor = asset.AsImage();

                Texture2D sourceImage = context.Helper.Content.Load<Texture2D>("assets/rod_sprites.png", ContentSource.ModFolder);
                editor.PatchImage(sourceImage, targetArea: new Rectangle(128, 0, 64, 16));
                sourceImage = context.Helper.Content.Load<Texture2D>("assets/rod_farmer.png", ContentSource.ModFolder);
                editor.PatchImage(sourceImage, targetArea: new Rectangle(0, 289, 295, 95));
                sourceImage.Dispose();
            }
            else
            {
                translate = context.Helper.Translation;
                IDictionary<string, string> data = asset.AsDictionary<string, string>().Data;
                foreach (string itemID in data.Keys.ToArray())
                {
                    switch (itemID)
                    {
                        case "FishingRod.cs.14041":
                            data[itemID] = translate.Get("net.fishing");
                            break;
                        case "FishingRod.cs.trainingRodDescription":
                            data[itemID] = translate.Get("net.trainingDesc");
                            break;
                        case "FishingRod.cs.14045":
                            data[itemID] = translate.Get("net.bamboo");
                            break;
                        case "FishingRod.cs.14046":
                            data[itemID] = translate.Get("net.training");
                            break;
                        case "FishingRod.cs.14047":
                            data[itemID] = translate.Get("net.fiberglass");
                            break;
                        case "FishingRod.cs.14048":
                            data[itemID] = translate.Get("net.iridium");
                            break;
                        case "SkillPage.cs.11598":
                            data[itemID] = translate.Get("net.skill");
                            break;
                        default:
                            break;
                    }
                }
            }
        }


        private static void UpdateConfig()
        {
            config = context.Helper.ReadConfig<ModConfig>();
            try
            {
                fishySound = SoundEffect.FromStream(new FileStream(Path.Combine(context.Helper.DirectoryPath, "assets", "fishy.wav"), FileMode.Open));
            }
            catch (Exception ex)
            {
                context.Monitor.Log($"error loading fishy.wav: {ex}", LogLevel.Error);
            }


            if (!config.Voice_Test_Ignore_Me.Equals(config.VoiceVolume + "/" + config.VoicePitch, StringComparison.Ordinal)) //play voice and save it if changed
            {
                config.Voice_Test_Ignore_Me = config.VoiceVolume + "/" + config.VoicePitch;
                fishySound.Play(voiceVolume, voicePitch, 0f);
                context.Helper.WriteConfig(config);
            }
            if (Context.IsWorldReady)
            {
                voiceVolume = config.VoiceVolume / 100f;
                voicePitch = config.VoicePitch / 100f;
                startMinigameStyle = config.StartMinigameStyle;
                endMinigameStyle = config.EndMinigameStyle;
                minigameDamage = config.EndMinigameDamage;
                minigameDifficulty = config.MinigameDifficulty;
                festivalMode = config.FestivalMode;
                try
                {
                    if (config.KeyBinds.Equals("") || config.KeyBinds.Equals(" ")) throw new FormatException("String can't be empty.");
                    keyBinds = KeybindList.Parse(config.KeyBinds);
                }
                catch (Exception e)
                {
                    string def = "MouseLeft, Space, ControllerX";
                    keyBinds = KeybindList.Parse(def);
                    config.KeyBinds = def;
                    context.Helper.WriteConfig(config);
                    context.Monitor.Log(e.Message + " Resetting KeyBinds to default. For key names, see: https://stardewcommunitywiki.com/Modding:Player_Guide/Key_Bindings", LogLevel.Error);
                }
            }
        }
    }
}
